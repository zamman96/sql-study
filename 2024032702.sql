2024-0327-02) 집합연산자
-  SELECT 문의 결과를 집합으로 보고 각 집합에 대한 합집합, 차집합, 교집합 결과를
반환할 때 사용
- 여러 개의 SELECT문이 연결되어 하나의 결과로 반납 받을 때 사용
- UNION, UNION ALL, INTERSECT, MINUS 연산자 제공
- 각 SELECT 문의 SELECT절에 사용된 컬럼의 수와 타입은 반드시 일치해야함 (컬럼도 동일
컬럼을 사용해야 의미상 오류를 발생시키지 않음)
- 반환되는 컬럼들의 컬럼명은 첫 번째 SELECT문에 사용된 컬럼이 적용됨
- ORDER BY절은 가장 마지막 SELECT문에만 사용 가능

** 다음 테이블을 생성하고 아래 데이터를 입력하시오
    테이블명 : BUDGET_TBL
           컬럼 : PERIOD  CHAR(6)
                     BUDGET_AMT NUMBER(5)
    데이터
    -----------------------------------------------------
           PERIOD                 BUDGET_AMT
    ----------------------------------------------------- 
            202201                        10000
            202202                          5000
            202203                        15000
            202204                        20000
            202205                        21000
            202206                        20000
            
    테이블명 : SALE_TBL
           컬럼 : PERIOD  CHAR(6)
                     BUDGET_AMT NUMBER(5)
    데이터
    -----------------------------------------------------
           PERIOD                 BUDGET_AMT
    ----------------------------------------------------- 
            202201                          8000
            202202                          6500
            202203                        12000
            202204                        18000
            202205                        23000
            202206                        15000
            
 1. UNION (ALL)
 - 합집합의 결과를 반환
 - 구조가 다른 여러 테이블에서 동일형태의 자료를 추출하는 경우
    (테이블을 횡으로 합친 결과)
- 컬럼을 행으로 전환한 후 조회할 때
   (테이블을 분할한 후 분할된 테이블들의 내용을 결합하여 행으로 반환)
   
(사용형식)
 SELECT 문
  UNION | UNION ALL
  SELECT 문
        :

 . UNION : 공통부분의 중복을 허용하지 않음
 . UNION ALL : 공통부분의 중복을 허용함
 
사용 예시)
 SELECT JOB_ID, SALARY
    FROM HR.EMPLOYEES
  WHERE SALARY BETWEEN 2000 AND 3000
 UNION
 SELECT JOB_ID,SALARY
    FROM HR.EMPLOYEES
  WHERE SALARY BETWEEN 5000 AND 6000;
            
            
            
            
            
            
            
            
            